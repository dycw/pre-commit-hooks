# build-system
[build-system]
  build-backend = "uv_build"
  requires = ["uv_build"]

# dependency groups
[dependency-groups]
  dev = ["dycw-utilities[test]", "pyright[nodejs]", "rich"]

# project
[project]
  authors = [{ email = "d.wan@icloud.com", name = "Derek Wan" }]
  dependencies = [
    "click >=8.3.0, <8.4",
    "dycw-utilities >=0.169.4, <0.170",
    "gitpython >=3.1.45, <3.2",
    "libcst >=1.8.5, <1.9",
    "loguru >=0.7.3, <0.8",
    "more-itertools >=10.8.0, <10.9",
    "orjson >=3.11.4, <3.12",
    "packaging >=25.0, <25.1",
    "tomlkit >=0.13.3, <0.14",
    "xdg-base-dirs >=6.0.2, <6.1",
  ]
  name = "dycw-pre-commit-hooks"
  readme = "README.md"
  requires-python = ">= 3.13"
  version = "0.13.24"

  [project.scripts]
    check-submodules-updated = "pre_commit_hooks.check_submodules_updated:main"
    check-version-bumped = "pre_commit_hooks.check_version_bumped:main"
    format-requirements = "pre_commit_hooks.format_requirements:main"
    mirror-files = "pre_commit_hooks.mirror_files:main"
    replace-sequence-str = "pre_commit_hooks.replace_sequence_str:main"
    run-bump-my-version = "pre_commit_hooks.run_bump_my_version:main"
    tag-commits = "pre_commit_hooks.tag_commits:main"

# tool
[tool]

  # bump-my-version
  [tool.bumpversion]
    allow_dirty = true
    current_version = "0.13.24"

    [[tool.bumpversion.files]]
      filename = "src/pre_commit_hooks/__init__.py"
      replace = "__version__ = \"{new_version}\""
      search = "__version__ = \"{current_version}\""

  # coverage
  [tool.coverage]
    [tool.coverage.html]
      directory = ".coverage/html"

    [tool.coverage.report]
      exclude_also = ["@overload", "if TYPE_CHECKING:"]
      fail_under = 100.0
      skip_covered = true
      skip_empty = true

    [tool.coverage.run]
      branch = true
      data_file = ".coverage/data"
      parallel = true

  # nitpick
  [tool.nitpick]
    style = [
      "https://raw.githubusercontent.com/dycw/nitpick/master/styles/3.13.toml",
      "https://raw.githubusercontent.com/dycw/nitpick/master/styles/common.toml",
    ]

  # pyright
  [tool.pyright]
    deprecateTypingAliases = true
    enableReachabilityAnalysis = false
    ignore = ["**/_typeshed/**"]
    pythonVersion = "3.13"
    reportAny = false
    reportCallInDefaultInitializer = true
    reportImplicitOverride = true
    reportImplicitStringConcatenation = true
    reportImportCycles = true
    reportMissingSuperCall = true
    reportMissingTypeArgument = false
    reportMissingTypeStubs = false
    reportPrivateUsage = false
    reportPropertyTypeMismatch = true
    reportShadowedImports = true
    reportUninitializedInstanceVariable = true
    reportUnknownArgumentType = false
    reportUnknownMemberType = false
    reportUnknownParameterType = false
    reportUnknownVariableType = false
    reportUnnecessaryComparison = false
    reportUnnecessaryTypeIgnoreComment = true
    reportUnusedCallResult = true
    reportUnusedImport = false
    reportUnusedVariable = false
    typeCheckingMode = "strict"

  # pytest
  [tool.pytest]
    [tool.pytest.ini_options]
      addopts = ["--color=auto", "--strict-markers", "-ra", "-vv"]
      asyncio_default_fixture_loop_scope = "function"
      asyncio_mode = "auto"
      collect_imported_tests = false
      filterwarnings = ["error"]
      minversion = "8.0"
      testpaths = ["src/tests"]
      xfail_strict = true


  # ruff
  [tool.ruff]
    src = ["src"]
    target-version = "py313"
    unsafe-fixes = true

    [tool.ruff.format]
      preview = true
      skip-magic-trailing-comma = true

    [tool.ruff.lint]
      explicit-preview-rules = true
      fixable = ["ALL"]
      ignore = [
        "ANN401",   # any-type
        "ASYNC109", # async-function-with-timeout
        "C901",     # complex-structure
        "CPY",      # flake8-copyright
        "D",        # pydocstyle
        "DOC",      # pydoclint
        "E501",     # line-too-long
        "PD",       # pandas-vet
        "PERF203",  # try-except-in-loop
        "PLC0415",  # import-outside-top-level
        "PLR0911",  # too-many-return-statements
        "PLR0912",  # too-many-branches
        "PLR0913",  # too-many-arguments
        "PLR0915",  # too-many-statements
        "PLR2004",  # magic-value-comparison
        "PT012",    # pytest-raises-with-multiple-statements
        "PT013",    # pytest-incorrect-pytest-import
        "S202",     # tarfile-unsafe-members
        "S310",     # suspicious-url-open-usage
        "S311",     # suspicious-non-cryptographic-random-usage
        "S602",     # subprocess-popen-with-shell-equals-true
        "S603",     # subprocess-without-shell-equals-true
        "S607",     # start-process-with-partial-path
        # preview
        "S101", # assert
        # formatter
        "COM812", # missing-trailing-comma
        "COM819", # prohibited-trailing-comma
        "E111",   # indentation-with-invalid-multiple
        "E114",   # indentation-with-invalid-multiple-comment
        "E117",   # over-indented
        "ISC001", # single-line-implicit-string-concatenation
        "ISC002", # multi-line-implicit-string-concatenation
        "W191",   # tab-indentation
      ]
      preview = true
      select = [
        "ALL",
        "RUF022", # unsorted-dunder-all
      ]

      [tool.ruff.lint.extend-per-file-ignores]
        "*.ipynb" = [
          "B018",    # useless-expression
          "F403",    # undefined-local-with-import-star
          "F405",    # undefined-local-with-import-star-usage
          "PLE1142", # await-outside-async
          "S101",    # assert-used
        ]
        "src/tests/**/*.py" = [
          "S101", # assert-used
        ]

      [tool.ruff.lint.flake8-tidy-imports]
        ban-relative-imports = "all"

      [tool.ruff.lint.isort]
        required-imports = ["from __future__ import annotations"]
        split-on-trailing-comma = false

  # uv
  [tool.uv]
    [tool.uv.build-backend]
      module-name = "pre_commit_hooks"
      module-root = "src"
